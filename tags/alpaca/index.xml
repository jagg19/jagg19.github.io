<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Alpaca on Running on R</title>
    <link>/tags/alpaca/</link>
    <description>Recent content in Alpaca on Running on R</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 15 Apr 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/alpaca/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AlpacaforR</title>
      <link>/2019/04/alpaca-for-r/</link>
      <pubDate>Mon, 15 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/04/alpaca-for-r/</guid>
      <description>#AlpacaforR
 What is Alpaca and AlpacaforR Some Example Functions Implementing the Earnings Strategy Some Bonus Example Functions - Live Account Users Learn more about Alpaca and AlpacaforR Github  
After writing my recent post Scaling a Simple Earnings Strategy to the NASDAQ Exchange, I started to research how I could implement that earnings strategy into a live brokerage account directly from R. Most of us have heard of Quantopian or other backtesting services, but things can get complicated quickly once you search for a way to implement a live strategy using R.</description>
    </item>
    
  </channel>
</rss>